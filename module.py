from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64
public_key='-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0MjR0fTp3OxG+iVllpWP\nk0/hn9uh5KxyyrGLSHOYmQUItYUeqSGHbkUK1C/s7d9jmezOP0e88zoepg8pbnBg\nshhOlisDNq31OuYPaJRgZTRpEL6VDSSdT5kSkIOdj+4hSHSqEtMSAG25a6k3Ep6P\nyTvZXwMHOSZsl6qm8F48iRL1NA2kE4zx+XEabeTE62idew/Ol/BGudfv7hf21aNR\nK2aLJPPJO0Hrde+Fj1DJdCiqBnM+hb/hPZ+SUcARbUSmGQC+JXmifLtPdrQwqHlI\n0njY/FV+ZQTax5WZjr3cyBw9+RgwQ4qnUchtBzWFZamedZW633WgdM4MHImLKjO2\nVQIDAQAB\n-----END PUBLIC KEY-----\n'
m='nihao woshilpb'
def encrypt_string(plaintext): 
    key=RSA.importKey(public_key)
    key=PKCS1_OAEP.new(key)
    encrypted=''
    chunk_size=128
    offset=0
    while offset<len(m):
        chunk=m[offset:offset+chunk_size]
        if len(chunk)%chunk_size!=0:
            chunk+=' '*(chunk_size-len(chunk))
        encrypted+=key.encrypt(chunk)
        offset+=chunk_size
    encrypted=base64.b64encode(encrypted)
    return encrypted

private_key='-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA0MjR0fTp3OxG+iVllpWPk0/hn9uh5KxyyrGLSHOYmQUItYUe\nqSGHbkUK1C/s7d9jmezOP0e88zoepg8pbnBgshhOlisDNq31OuYPaJRgZTRpEL6V\nDSSdT5kSkIOdj+4hSHSqEtMSAG25a6k3Ep6PyTvZXwMHOSZsl6qm8F48iRL1NA2k\nE4zx+XEabeTE62idew/Ol/BGudfv7hf21aNRK2aLJPPJO0Hrde+Fj1DJdCiqBnM+\nhb/hPZ+SUcARbUSmGQC+JXmifLtPdrQwqHlI0njY/FV+ZQTax5WZjr3cyBw9+Rgw\nQ4qnUchtBzWFZamedZW633WgdM4MHImLKjO2VQIDAQABAoIBAAkcemubMIl/lilc\ncG594GIhXktHnm0ISYom7VkgEky7N4IUaR4gZHSfdrWD0ecflI0nFGkWjFxg8O12\nQ+yZ4t5iySssfVtphAYp/AooT3ybKOqeJosISgUrPPApjjq1vaYX0UQ5CdQS9cCJ\nBeo+GTBC+F15GFuaHasQu3BJ7IJeyTvuACs07xXyqF7W8krPiTwVOGlRLJ2T3OrV\nFJpVwrJI36TW2uANMGw6HisHYD/6HiJWFs8BsIlWpoOoeIlA7Z9pu7UonJnodPq6\nZZXYexziiN2ou29o2I0kByZuGtffBEJIZp8DXJ6BvPjCYVDCmrOSW9Gy8CZsqFbO\nzyPvjAECgYEA321EXpnZLYUwCYHY2SQGeva3mNtJxJ1sFNEPhlEWbCNEhEpHp/8M\nw/xLo8m/Mo/6ja3tvycrSxdYgrncuHt2PO1i/PjawevISu0cxWn14MsW/aKn7iCM\n4j+XzMviBA6KtmMQVu8FD8SYpPKQ1uDFmpRLApLBvKgtatdQaUqKoBUCgYEA7zkR\n8fGMLXXjaN3JOVEQ2vFT3oFuew/Y1dwMbbSsqwZhlerrK7deSVzE9ybRYqzUaUi/\nZdmzxu4jRRfMxf406VGgVu9d6gH+7sUVEEejL7GpqqOmTgRanWkl3+AbGyTQiIs6\n99DxZUIlFkStzhqPNRhV363X4vYWiVRWUT9gDUECgYEA0Fg7LiA29gzB28u6o9nF\nNTsFv8OVSYQmuk6tNGo/B33nsZj2swDSLZwCCOzjn0nFsgJjtiHXbEGL5vNckKeI\nfY48BXwlujmdX8k2UBzcDNA1UzUvdY3i8kOs0Wu6CmBpF2TPYtGmnaqNURtk1wtp\nGRl5zR9/C+aj24KG2HiLRnUCgYBf0kFQ40sd7omvuJ7geYtB18abasbhPkDBsQm9\na9B6FO1Dyrx2X1XCFwnCYecfGlFe9sfLuT8coMi55UWdzSxOhOavy+OXV0NRStoc\nEkXYVda7Rh/YQkA1qyeDnFXfMojhGLv/Bc+bmroWSF5CHztbriq/lPfTrnTqf0Cv\n/K2xwQKBgQC1GNifLywebLhE6p83fo/P3Vjbb0SFLlJpVdQrXqO50NwbF4m0SoZj\nQMnRjTsv/XaaLQMG0HFZ9IJznTmOr9pvWJjXVletG84U1g/1QtYkjI8pFTuMR3/k\nSIm2UnZRFoaqxE4me/lpJhgcgWxLpVA8Ow7TcXJFRb6WalxX+CPTkQ==\n-----END RSA PRIVATE KEY-----'

def decrypt_string(plaintext): 
    key=RSA.importKey(private_key) 
    key=PKCS1_OAEP.new(key)
    plaintext=base64.b64decode(plaintext)
    chunk_size=256
    offset=0
    decrypted=''
    while offset<len(plaintext):
        decrypted+=key.decrypt(plaintext[offset:offset+chunk_size])
        offset+=chunk_size
    return decrypted
m='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'
#a=encrypt_string(m)
#print a
b=decrypt_string(m)
print b
